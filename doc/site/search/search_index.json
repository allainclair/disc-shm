{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Disciplina de Estrutura de dados Professor Nome: Allan (Allainclair Flausino dos Santos) Email: allainclair@gmail.com Gradua\u00e7\u00e3o: Mestre em Ci\u00eancia da computa\u00e7\u00e3o Informa\u00e7\u00f5es profissionais : LinkeIn - https://www.linkedin.com/in/allainclair/ Disciplina Site: https://allainclair.github.io/disc-estrutura-dados/ Avalia\u00e7\u00e3o (projeto) prova 1 [0-10] prova 2 [0-10] trabalho 1 [0-10] trabalho 2 [0-10] Nota final (NF) = (prova 1 + prova 2 + trabalho 1 + trabalho 2) / 4 Nota Exame (NE) M\u00e9dia final (MF) = (NF + NE) / 2 Python if NF >= 6.0 : print ( 'aprovado' ) elif MF >= 5.0 : print ( 'aprovado' ) else : print ( 'reprovado' )","title":"Introdu\u00e7\u00e3o"},{"location":"#disciplina-de-estrutura-de-dados","text":"","title":"Disciplina de Estrutura de dados"},{"location":"#professor","text":"Nome: Allan (Allainclair Flausino dos Santos) Email: allainclair@gmail.com Gradua\u00e7\u00e3o: Mestre em Ci\u00eancia da computa\u00e7\u00e3o Informa\u00e7\u00f5es profissionais : LinkeIn - https://www.linkedin.com/in/allainclair/","title":"Professor"},{"location":"#disciplina","text":"Site: https://allainclair.github.io/disc-estrutura-dados/","title":"Disciplina"},{"location":"#avaliacao-projeto","text":"prova 1 [0-10] prova 2 [0-10] trabalho 1 [0-10] trabalho 2 [0-10] Nota final (NF) = (prova 1 + prova 2 + trabalho 1 + trabalho 2) / 4 Nota Exame (NE) M\u00e9dia final (MF) = (NF + NE) / 2 Python if NF >= 6.0 : print ( 'aprovado' ) elif MF >= 5.0 : print ( 'aprovado' ) else : print ( 'reprovado' )","title":"Avalia\u00e7\u00e3o (projeto)"},{"location":"LEIAME/","text":"Python 3 Usaremos o Python 3, preferencialmente a vers\u00e3o 3.7 mas creio que n\u00e3o teremos problemas ao usar a vers\u00e3o 3.5. Verifique com o comando python qual a vers\u00e3o, pode ser que o Python esteja na vers\u00e3o 2, se estiver, o comando python3 deve executar a vers\u00e3o 3 . Isto acontece pois sistemas linux vem com as duas vers\u00f5es instaladas, e pode ser que a vers\u00e3o padr\u00e3o (comando python ) seja a vers\u00e3o 2. Ao usar o comando python um prompt ser\u00e1 aberto para que comandos python sejam executados. Tamb\u00e9m ser\u00e1 mostrado a vers\u00e3o do python. Esse prompt tamb\u00e9m chamados de interpretador do Python. \u00c9 uma forma de executar comandos r\u00e1pidos em Python e ver a resposta desses comandos, assim como os comandos do shell/bash do linux. $ python Python 2 .7.13 ( default, Sep 26 2018 , 18 :42:22 ) ... $ python3 Python 3 .7.2 ( default, Feb 27 2019 , 16 :03:03 ) ... Lembre-se de usar sempre o python na vers\u00e3o 3, mesmo que tenha que usar o comando python3 . Executando seus arquivos.py Basta usar o comando python arquivo.py que seu programa ser\u00e1 executado.","title":"LEIAME"},{"location":"LEIAME/#python-3","text":"Usaremos o Python 3, preferencialmente a vers\u00e3o 3.7 mas creio que n\u00e3o teremos problemas ao usar a vers\u00e3o 3.5. Verifique com o comando python qual a vers\u00e3o, pode ser que o Python esteja na vers\u00e3o 2, se estiver, o comando python3 deve executar a vers\u00e3o 3 . Isto acontece pois sistemas linux vem com as duas vers\u00f5es instaladas, e pode ser que a vers\u00e3o padr\u00e3o (comando python ) seja a vers\u00e3o 2. Ao usar o comando python um prompt ser\u00e1 aberto para que comandos python sejam executados. Tamb\u00e9m ser\u00e1 mostrado a vers\u00e3o do python. Esse prompt tamb\u00e9m chamados de interpretador do Python. \u00c9 uma forma de executar comandos r\u00e1pidos em Python e ver a resposta desses comandos, assim como os comandos do shell/bash do linux. $ python Python 2 .7.13 ( default, Sep 26 2018 , 18 :42:22 ) ... $ python3 Python 3 .7.2 ( default, Feb 27 2019 , 16 :03:03 ) ... Lembre-se de usar sempre o python na vers\u00e3o 3, mesmo que tenha que usar o comando python3 .","title":"Python 3"},{"location":"LEIAME/#executando-seus-arquivospy","text":"Basta usar o comando python arquivo.py que seu programa ser\u00e1 executado.","title":"Executando seus arquivos.py"},{"location":"aula1/","text":"Estrutura de dados Em Ci\u00eancia da computa\u00e7\u00e3o, uma estrutura de dado \u00e9 um formato de organiza\u00e7\u00e3o, gerenciamento e armazenamento de dados que habilita acesso e modifica\u00e7\u00e3o eficiente. Revis\u00e3o Vari\u00e1veis simples * Python a = 1 # Inteiro b = 2 c = True # Booleano d = 'uma string' # String e = 1.1 # Ponto flutuante (Float) print ( a ) 1 print ( b ) 2 print ( c ) True print ( d ) uma string print ( e ) 1.1 Operadores * Python # Aritmeticos principais: + - * / % # Extra: ** (potencia) a = 2 b = 4 a + b 6 a ** 2 4 # Logicos principais: not and or # Comparacao: < > <= >= == != a = 2 b = 4 a > b False b > a True","title":"Aula 1 (2019-04-03)"},{"location":"aula1/#estrutura-de-dados","text":"Em Ci\u00eancia da computa\u00e7\u00e3o, uma estrutura de dado \u00e9 um formato de organiza\u00e7\u00e3o, gerenciamento e armazenamento de dados que habilita acesso e modifica\u00e7\u00e3o eficiente.","title":"Estrutura de dados"},{"location":"aula1/#revisao","text":"","title":"Revis\u00e3o"},{"location":"aula1/#variaveis-simples","text":"Python a = 1 # Inteiro b = 2 c = True # Booleano d = 'uma string' # String e = 1.1 # Ponto flutuante (Float) print ( a ) 1 print ( b ) 2 print ( c ) True print ( d ) uma string print ( e ) 1.1","title":"Vari\u00e1veis simples *"},{"location":"aula1/#operadores","text":"Python # Aritmeticos principais: + - * / % # Extra: ** (potencia) a = 2 b = 4 a + b 6 a ** 2 4 # Logicos principais: not and or # Comparacao: < > <= >= == != a = 2 b = 4 a > b False b > a True","title":"Operadores *"},{"location":"aula2/","text":"\"Revis\u00e3o\" Exerc\u00edcio da Nota Final e M\u00e9dia Final (NF e MF) Um professor pretende saber se os seus alunos est\u00e3o aprovados ou reprovados por meio de um programa em Python! O programa pede para o professor adicionar a Nota Final (NF) de um determinado aluno, se esse aluno n\u00e3o passar com a Nota Final, o sistema tamb\u00e9m pede a M\u00e9dia Final (MF) desse aluno. Com isso, o sistema pode informar se esse aluno passou ou n\u00e3o na disciplina do professor. Escreva o c\u00f3digo fonte em python para o professor! \u00c9 necess\u00e1rio que as notas sejam dadas por meio do teclado com a fun\u00e7\u00e3o input e a sa\u00edda seja impressa na tela com a fun\u00e7\u00e3o print . Python if NF >= 6.0 : print ( 'aprovado' ) elif MF >= 5.0 : print ( 'aprovado' ) else : print ( 'reprovado' ) Exerc\u00edcio idade ano, meses para dias Escreve um programa que leia a idade de uma pessoa expressa em anos, meses e dias e mostre-a expressa apenas em dias. Transforme esse seu programa para uma fun\u00e7\u00e3o chamada idade_dias(anos, menses, dias) que recebe os 3 argumentos respectivamente e retorne a idade em dias. Obs.: assumir que todos anos tenham 365 dias e que todos os meses tenham 30 dias. (para facilitar o programa) Ex: Entrada : 10 ( anos ), 2 ( meses ), 3 ( dias ) Sa\u00edda : -- Algumas formas de print * Python print ( 'Print com mais do que um argumento' , arg1 , arg2 ) print ( 'Uso do operador \"percentage\" para string: %s %s ' % ( string1 , string2 )) # Python Version >= 3.7 string = 'uma string' print ( f 'Uma string com interpotalacao: {string}' ) print ( 'Evitar linhas de codigos muito extensas pois dificulta a leitura do seu ' 'codigo, entao essa eh uma forma de vc quebrar a linha. Existe uma regra ' 'de no maximo 79-80 colunas de codigo, tente usar ela, soh que nao tem ' 'problema se passar de 80 ou chegar ateh umas 85 colunas. Essa formatacao ' 'de codigo desse print pode ser usada nos codigos tambem.' ) funcao ( argumento1 , argumento2 , argumento3 , argumento4 , argumento5 , argumento6 , argumento7 , argumento8 ) Estruturas de repeti\u00e7\u00e3o ** FOR e WHILE FOR *** Python for ELEMENTO in ITERADOR : CORPO DO FOR C for ( i = 0 ; i < n ; i ++ ) { CORPO DO FOR } Um iterador \u00e9 um \"conjunto de elementos\", podendo ser vazio, ter apenas um elemento, ou mais do que um elemento. Se for vazio, o corpo (escopo) do for n\u00e3o \u00e9 executado. Caso contr\u00e1rio o corpo do for \u00e9 executado em todos elementos do iterador. Python for i in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]: print ( 'i: %s ' , i ) 1 2 3 4 5 6 7 8 9 10 Outros exemplos com FOR: Python range ( 10 ) # Funcao pronta (interna) do Python. range ( 0 , 10 ) # Transformar o \"range\" em uma \"list\" (vetor). # Para fins de aprendizado, vetor e lista (list) sao sinonimos. list ( range ( 10 )) [ 0 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 )) [ 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 , 2 )) [ 5 , 7 , 9 ] vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] tamanho = len ( vetor ) # Funcao pronta (interna) do Python. print ( tamanho ) 10 for i in range ( tamanho ): print ( 'i: %s ' , vetor [ i ]) # Alernativa mais elegante. for elemento in vetor : print ( 'Elemento: %s ' , elemento ) # Alernativa elegante enumerada. for i , elemento in enumerate ( vetor ): print ( 'Elemento %s : %s ' , ( i , elemento )) list ( enumerate ( vetor )) [( 0 , 1 ), ( 1 , 2 ), ( 2 , 3 ), ( 3 , 4 ), ( 4 , 5 ), ( 5 , 6 ), ( 6 , 7 ), ( 7 , 8 ), ( 8 , 9 )] nomes = [ 'joao' , 'maria,' 'jose' ] for i , elemento in enumerate ( nomes ): print ( 'Elemento %s : %s ' , ( i , elemento )) WHILE * Python while CONDICAO : CORPO DO WHILE Enquanto a condi\u00e7\u00e3o for verdadeira o while \u00e9 executado indefinidamente; caso contr\u00e1rio o while para sua execu\u00e7\u00e3o. Python condicao = True i = 0 while condicao : print ( i ) i += 1 if i > 10 : condicao = False Fun\u00e7\u00e3o ** Python def nome ( parametro1 , parametro2 ): CORPO DA FUNCAO return VALOR Exemplos e revis\u00e3o Vetor (Arranjo) Formato: Python # Em python o nome dessa estrutura de dado eh conhecida como lista # Mas para fins de exemplo criamos uma variavel com o nome vetor. # Indices do vetor comeca em 0. vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] print ( vetor [ 0 ]) 1 C /* Aqui alocamos um vetor de inteiros com 10 elementos, sendo eles todo * o intervalo [1, 10]. * Indicies comecam em 0. */ int vetor [] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; printf ( \"%d\" , vetor [ 0 ]); 1 Gerenciamento: Em um vetor podemos: adicionar, atualizar, excluir e ler elementos. Adicionar * Adi\u00e7\u00e3o modifica o vetor original, aumentando pelo menos um elemento novo. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . append ( 11 ) # Metodo (funcao) de orientacao a objeto. vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] # Apenas para mostrar como eh no \"paradigma estrutural\". def meu_append ( vetor , novo_elemento ): vetor . append ( novo_elemento ) # Funcao nao retorna nada, podemos chamar de \"procedimento\". vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] meu_append ( vetor , novo_elemento ) vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] Atualizar * Atualiza\u00e7\u00e3o precisa modificar algum elemento j\u00e1 existente do vetor original. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor [ 2 ] = 11 vetor [ 1 , 2 , 11 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] Remover * Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . remove ( 5 ) # Qual algoritmo eh necessario ANTES de remover? vetor [ 1 , 2 , 3 , 4 , 6 , 7 , 8 , 9 , 10 ] # TODO: exercicio: fazer o seu proprio remover. def meu_remover ( vetor , elemento ): pass # Funcao nao retorna nada Ler * Python # Leitura NAO pode modificar o nosso vetor original vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] a = vetor [ 2 ] a 2 # Leitura direta do vetor para impressao print ( vetor [ 2 ]) Armazenamento: ** Mem\u00f3ria RAM, registradores do processador (CPU), dispositivo de armazenamento secund\u00e1rio (HDDs, SSDs, etc). Mem\u00f3ria RAM ** Um vetor de caracteres armazenados em mem\u00f3ria RAM. # Assumindo que cada caracter tem um byte. vetor = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] Endere\u00e7o Dado 100000 '1' 100001 '2' 100002 '3' 100003 '4' 100004 '5' 100005 '6' 100006 '7' 100007 '8' 100008 '9' 100009 '10' Exerc\u00edcio: encontrar posi\u00e7\u00e3o de um elemento em um vetor ** Dado um vetor e um elemento como entrada para uma fun\u00e7\u00e3o chamda de find , retorne a posi\u00e7\u00e3o do elemento encontrado; caso n\u00e3o seja encontrado retorne None (nulo). Python def find ( vetor , elemento ):","title":"Aula 2 (2019-04-05)"},{"location":"aula2/#revisao","text":"","title":"\"Revis\u00e3o\""},{"location":"aula2/#exercicio-da-nota-final-e-media-final-nf-e-mf","text":"Um professor pretende saber se os seus alunos est\u00e3o aprovados ou reprovados por meio de um programa em Python! O programa pede para o professor adicionar a Nota Final (NF) de um determinado aluno, se esse aluno n\u00e3o passar com a Nota Final, o sistema tamb\u00e9m pede a M\u00e9dia Final (MF) desse aluno. Com isso, o sistema pode informar se esse aluno passou ou n\u00e3o na disciplina do professor. Escreva o c\u00f3digo fonte em python para o professor! \u00c9 necess\u00e1rio que as notas sejam dadas por meio do teclado com a fun\u00e7\u00e3o input e a sa\u00edda seja impressa na tela com a fun\u00e7\u00e3o print . Python if NF >= 6.0 : print ( 'aprovado' ) elif MF >= 5.0 : print ( 'aprovado' ) else : print ( 'reprovado' )","title":"Exerc\u00edcio da Nota Final e M\u00e9dia Final (NF e MF)"},{"location":"aula2/#exercicio-idade-ano-meses-para-dias","text":"Escreve um programa que leia a idade de uma pessoa expressa em anos, meses e dias e mostre-a expressa apenas em dias. Transforme esse seu programa para uma fun\u00e7\u00e3o chamada idade_dias(anos, menses, dias) que recebe os 3 argumentos respectivamente e retorne a idade em dias. Obs.: assumir que todos anos tenham 365 dias e que todos os meses tenham 30 dias. (para facilitar o programa) Ex: Entrada : 10 ( anos ), 2 ( meses ), 3 ( dias ) Sa\u00edda : --","title":"Exerc\u00edcio idade ano, meses para dias"},{"location":"aula2/#algumas-formas-de-print","text":"Python print ( 'Print com mais do que um argumento' , arg1 , arg2 ) print ( 'Uso do operador \"percentage\" para string: %s %s ' % ( string1 , string2 )) # Python Version >= 3.7 string = 'uma string' print ( f 'Uma string com interpotalacao: {string}' ) print ( 'Evitar linhas de codigos muito extensas pois dificulta a leitura do seu ' 'codigo, entao essa eh uma forma de vc quebrar a linha. Existe uma regra ' 'de no maximo 79-80 colunas de codigo, tente usar ela, soh que nao tem ' 'problema se passar de 80 ou chegar ateh umas 85 colunas. Essa formatacao ' 'de codigo desse print pode ser usada nos codigos tambem.' ) funcao ( argumento1 , argumento2 , argumento3 , argumento4 , argumento5 , argumento6 , argumento7 , argumento8 )","title":"Algumas formas de print *"},{"location":"aula2/#estruturas-de-repeticao","text":"FOR e WHILE","title":"Estruturas de repeti\u00e7\u00e3o **"},{"location":"aula2/#for","text":"Python for ELEMENTO in ITERADOR : CORPO DO FOR C for ( i = 0 ; i < n ; i ++ ) { CORPO DO FOR } Um iterador \u00e9 um \"conjunto de elementos\", podendo ser vazio, ter apenas um elemento, ou mais do que um elemento. Se for vazio, o corpo (escopo) do for n\u00e3o \u00e9 executado. Caso contr\u00e1rio o corpo do for \u00e9 executado em todos elementos do iterador. Python for i in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]: print ( 'i: %s ' , i ) 1 2 3 4 5 6 7 8 9 10 Outros exemplos com FOR: Python range ( 10 ) # Funcao pronta (interna) do Python. range ( 0 , 10 ) # Transformar o \"range\" em uma \"list\" (vetor). # Para fins de aprendizado, vetor e lista (list) sao sinonimos. list ( range ( 10 )) [ 0 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 )) [ 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 , 2 )) [ 5 , 7 , 9 ] vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] tamanho = len ( vetor ) # Funcao pronta (interna) do Python. print ( tamanho ) 10 for i in range ( tamanho ): print ( 'i: %s ' , vetor [ i ]) # Alernativa mais elegante. for elemento in vetor : print ( 'Elemento: %s ' , elemento ) # Alernativa elegante enumerada. for i , elemento in enumerate ( vetor ): print ( 'Elemento %s : %s ' , ( i , elemento )) list ( enumerate ( vetor )) [( 0 , 1 ), ( 1 , 2 ), ( 2 , 3 ), ( 3 , 4 ), ( 4 , 5 ), ( 5 , 6 ), ( 6 , 7 ), ( 7 , 8 ), ( 8 , 9 )] nomes = [ 'joao' , 'maria,' 'jose' ] for i , elemento in enumerate ( nomes ): print ( 'Elemento %s : %s ' , ( i , elemento ))","title":"FOR ***"},{"location":"aula2/#while","text":"Python while CONDICAO : CORPO DO WHILE Enquanto a condi\u00e7\u00e3o for verdadeira o while \u00e9 executado indefinidamente; caso contr\u00e1rio o while para sua execu\u00e7\u00e3o. Python condicao = True i = 0 while condicao : print ( i ) i += 1 if i > 10 : condicao = False","title":"WHILE *"},{"location":"aula2/#funcao","text":"Python def nome ( parametro1 , parametro2 ): CORPO DA FUNCAO return VALOR","title":"Fun\u00e7\u00e3o **"},{"location":"aula2/#exemplos-e-revisao","text":"","title":"Exemplos e revis\u00e3o"},{"location":"aula2/#vetor-arranjo","text":"","title":"Vetor (Arranjo)"},{"location":"aula2/#formato","text":"Python # Em python o nome dessa estrutura de dado eh conhecida como lista # Mas para fins de exemplo criamos uma variavel com o nome vetor. # Indices do vetor comeca em 0. vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] print ( vetor [ 0 ]) 1 C /* Aqui alocamos um vetor de inteiros com 10 elementos, sendo eles todo * o intervalo [1, 10]. * Indicies comecam em 0. */ int vetor [] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; printf ( \"%d\" , vetor [ 0 ]); 1","title":"Formato:"},{"location":"aula2/#gerenciamento","text":"Em um vetor podemos: adicionar, atualizar, excluir e ler elementos.","title":"Gerenciamento:"},{"location":"aula2/#adicionar","text":"Adi\u00e7\u00e3o modifica o vetor original, aumentando pelo menos um elemento novo. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . append ( 11 ) # Metodo (funcao) de orientacao a objeto. vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] # Apenas para mostrar como eh no \"paradigma estrutural\". def meu_append ( vetor , novo_elemento ): vetor . append ( novo_elemento ) # Funcao nao retorna nada, podemos chamar de \"procedimento\". vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] meu_append ( vetor , novo_elemento ) vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ]","title":"Adicionar *"},{"location":"aula2/#atualizar","text":"Atualiza\u00e7\u00e3o precisa modificar algum elemento j\u00e1 existente do vetor original. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor [ 2 ] = 11 vetor [ 1 , 2 , 11 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]","title":"Atualizar *"},{"location":"aula2/#remover","text":"Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . remove ( 5 ) # Qual algoritmo eh necessario ANTES de remover? vetor [ 1 , 2 , 3 , 4 , 6 , 7 , 8 , 9 , 10 ] # TODO: exercicio: fazer o seu proprio remover. def meu_remover ( vetor , elemento ): pass # Funcao nao retorna nada","title":"Remover *"},{"location":"aula2/#ler","text":"Python # Leitura NAO pode modificar o nosso vetor original vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] a = vetor [ 2 ] a 2 # Leitura direta do vetor para impressao print ( vetor [ 2 ])","title":"Ler *"},{"location":"aula2/#armazenamento","text":"Mem\u00f3ria RAM, registradores do processador (CPU), dispositivo de armazenamento secund\u00e1rio (HDDs, SSDs, etc).","title":"Armazenamento: **"},{"location":"aula2/#memoria-ram","text":"Um vetor de caracteres armazenados em mem\u00f3ria RAM. # Assumindo que cada caracter tem um byte. vetor = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] Endere\u00e7o Dado 100000 '1' 100001 '2' 100002 '3' 100003 '4' 100004 '5' 100005 '6' 100006 '7' 100007 '8' 100008 '9' 100009 '10'","title":"Mem\u00f3ria RAM **"},{"location":"aula2/#exercicio-encontrar-posicao-de-um-elemento-em-um-vetor","text":"Dado um vetor e um elemento como entrada para uma fun\u00e7\u00e3o chamda de find , retorne a posi\u00e7\u00e3o do elemento encontrado; caso n\u00e3o seja encontrado retorne None (nulo). Python def find ( vetor , elemento ):","title":"Exerc\u00edcio: encontrar posi\u00e7\u00e3o de um elemento em um vetor **"},{"location":"exercicios1/","text":"Exerc\u00edcio 1.1 Defina uma fun\u00e7\u00e3o chamada max3 que dado 3 n\u00fameros (a, b, c) ela retorne o maior entre eles (sem usar a fun\u00e7\u00e3o max() ). Python # Para testar seu codigo adicione esses codigos no seu c\u00f3digo fonte. retorno = max3 ( 1 , 2 , 3 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 3 assert max3 ( 4 , 2 , 3 ) == 4 assert max3 ( 4 , 5 , 3 ) == 5 assert max3 ( 10 , 5 , 3 ) == 10 assert max3 ( 10 , 5 , 11 ) == 11 print ( 'Tudo certo!!?' ) Exerc\u00edcio 1.2 Fa\u00e7a um fun\u00e7\u00e3o chamada media_pond3 que tenha 3 notas de um aluno e retorne a m\u00e9dia final deste aluno. Considerar que a m\u00e9dia \u00e9 ponderada e que o peso das notas \u00e9: 1, 2 e 3 respectivamente. As notas s\u00e3o passada como argumento respectivamente. Python # Para testar seu codigo adicione esses codigos no seu c\u00f3digo fonte. # Necessario mais testes! retorno = media_pond3 ( 10 , 10 , 10 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 10 assert media_pond3 ( 2 , 2 , 6 ) == 4 print ( 'Tudo certo!!?' ) Exerc\u00edcio 1.2.1 Fa\u00e7a uma fun\u00e7\u00e3o chamada aprovar que retorne Verdadeiro ( True ) ou Falso ( False ) caso o aluno seja aprovado ou reprovado respectivamente, com as mesmas regras do Exerc\u00edcio 1.2, ou seja, a m\u00e9dia \u00e9 ponderada de 3 notas. Fun\u00e7\u00f5es que s\u00f3 retornam True ou False s\u00e3o chamadas de fun\u00e7\u00f5es booleanas . Imprima 'Aprovado' ou 'Reprovado' dentro da fun\u00e7\u00e3o. Para um aluno ser aprovado \u00e9 necess\u00e1rio que ele tenha no m\u00ednimo 6 de nota. \u00c9 completamente v\u00e1lido reusar o c\u00f3digo do Exerc\u00edcio 1.2. Python # Sem testes ainda! Exerc\u00edcio 1.3 Construa uma fun\u00e7\u00e3o dist() que, tendo como dados de entrada dois pontos quaisquer no plano, p(x1,y1) e p(x2,y2), retorne a dist\u00e2ncia entre eles. A ordem dos par\u00e2metros s\u00e3o: x1, y1, x2 e y2. Python # Faca mais testes se voce quiser mais garantia # Preste a atencao na quantidade de parametros e seus respectivos nomes. retorno = dist ( 0 , 0 , 0 , 1 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 1 assert dist ( 0 , 0 , 1 , 0 ) == 1 assert dist ( 0 , 0 , 2 , 0 ) == 2 assert dist ( 0 , 0 , 0 , 3 ) == 3 assert dist ( 1 , 1 , 2 , 1 ) == 1 print ( 'Tudo certo!!?' ) Exerc\u00edcio 1.4 Fa\u00e7a um programa para ler o sal\u00e1rio de um funcion\u00e1rio e aument\u00e1-lo em 15%. Ap\u00f3s o aumento, desconte 8% de impostos. Imprima o sal\u00e1rio inicial, o sal\u00e1rio com o aumento e o sal\u00e1rio final. Exerc\u00edcio 1.4.1 Transforme o programa em uma fun\u00e7\u00e3o salario_liquido , que recebe o sal\u00e1rio como argumento e retorne o sal\u00e1rio l\u00edquido com as regras do exerc\u00f3dio 1.3. Exerc\u00edcio 1.5 Elabore um programa que dada a idade de um nadador classifica-o em uma das seguintes categorias: Infantil A = 5-7 anos Infantil B = 8-10 anos Juvenil A = 11-13 anos Juvenil B = 14-17 anos Adulto = maiores de 18 anos Tamb\u00e9m transforme seu programa em uma fun\u00e7\u00e3o, caso n\u00e3o o tenha feito. Ou seja, sua fun\u00e7\u00e3o ter\u00e1 como par\u00e2metro a idade do nadador e retorna uma string com o nome da categoria do nadador","title":"Exerc\u00edcios 1"},{"location":"exercicios1/#exercicio-11","text":"Defina uma fun\u00e7\u00e3o chamada max3 que dado 3 n\u00fameros (a, b, c) ela retorne o maior entre eles (sem usar a fun\u00e7\u00e3o max() ). Python # Para testar seu codigo adicione esses codigos no seu c\u00f3digo fonte. retorno = max3 ( 1 , 2 , 3 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 3 assert max3 ( 4 , 2 , 3 ) == 4 assert max3 ( 4 , 5 , 3 ) == 5 assert max3 ( 10 , 5 , 3 ) == 10 assert max3 ( 10 , 5 , 11 ) == 11 print ( 'Tudo certo!!?' )","title":"Exerc\u00edcio 1.1"},{"location":"exercicios1/#exercicio-12","text":"Fa\u00e7a um fun\u00e7\u00e3o chamada media_pond3 que tenha 3 notas de um aluno e retorne a m\u00e9dia final deste aluno. Considerar que a m\u00e9dia \u00e9 ponderada e que o peso das notas \u00e9: 1, 2 e 3 respectivamente. As notas s\u00e3o passada como argumento respectivamente. Python # Para testar seu codigo adicione esses codigos no seu c\u00f3digo fonte. # Necessario mais testes! retorno = media_pond3 ( 10 , 10 , 10 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 10 assert media_pond3 ( 2 , 2 , 6 ) == 4 print ( 'Tudo certo!!?' )","title":"Exerc\u00edcio 1.2"},{"location":"exercicios1/#exercicio-121","text":"Fa\u00e7a uma fun\u00e7\u00e3o chamada aprovar que retorne Verdadeiro ( True ) ou Falso ( False ) caso o aluno seja aprovado ou reprovado respectivamente, com as mesmas regras do Exerc\u00edcio 1.2, ou seja, a m\u00e9dia \u00e9 ponderada de 3 notas. Fun\u00e7\u00f5es que s\u00f3 retornam True ou False s\u00e3o chamadas de fun\u00e7\u00f5es booleanas . Imprima 'Aprovado' ou 'Reprovado' dentro da fun\u00e7\u00e3o. Para um aluno ser aprovado \u00e9 necess\u00e1rio que ele tenha no m\u00ednimo 6 de nota. \u00c9 completamente v\u00e1lido reusar o c\u00f3digo do Exerc\u00edcio 1.2. Python # Sem testes ainda!","title":"Exerc\u00edcio 1.2.1"},{"location":"exercicios1/#exercicio-13","text":"Construa uma fun\u00e7\u00e3o dist() que, tendo como dados de entrada dois pontos quaisquer no plano, p(x1,y1) e p(x2,y2), retorne a dist\u00e2ncia entre eles. A ordem dos par\u00e2metros s\u00e3o: x1, y1, x2 e y2. Python # Faca mais testes se voce quiser mais garantia # Preste a atencao na quantidade de parametros e seus respectivos nomes. retorno = dist ( 0 , 0 , 0 , 1 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 1 assert dist ( 0 , 0 , 1 , 0 ) == 1 assert dist ( 0 , 0 , 2 , 0 ) == 2 assert dist ( 0 , 0 , 0 , 3 ) == 3 assert dist ( 1 , 1 , 2 , 1 ) == 1 print ( 'Tudo certo!!?' )","title":"Exerc\u00edcio 1.3"},{"location":"exercicios1/#exercicio-14","text":"Fa\u00e7a um programa para ler o sal\u00e1rio de um funcion\u00e1rio e aument\u00e1-lo em 15%. Ap\u00f3s o aumento, desconte 8% de impostos. Imprima o sal\u00e1rio inicial, o sal\u00e1rio com o aumento e o sal\u00e1rio final.","title":"Exerc\u00edcio 1.4"},{"location":"exercicios1/#exercicio-141","text":"Transforme o programa em uma fun\u00e7\u00e3o salario_liquido , que recebe o sal\u00e1rio como argumento e retorne o sal\u00e1rio l\u00edquido com as regras do exerc\u00f3dio 1.3.","title":"Exerc\u00edcio 1.4.1"},{"location":"exercicios1/#exercicio-15","text":"Elabore um programa que dada a idade de um nadador classifica-o em uma das seguintes categorias: Infantil A = 5-7 anos Infantil B = 8-10 anos Juvenil A = 11-13 anos Juvenil B = 14-17 anos Adulto = maiores de 18 anos Tamb\u00e9m transforme seu programa em uma fun\u00e7\u00e3o, caso n\u00e3o o tenha feito. Ou seja, sua fun\u00e7\u00e3o ter\u00e1 como par\u00e2metro a idade do nadador e retorna uma string com o nome da categoria do nadador","title":"Exerc\u00edcio 1.5"}]}